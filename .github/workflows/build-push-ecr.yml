---
name: Build and Push to ECR

'on':
  push:
    branches: [stacklok-main]
    paths:
      - 'Dockerfile'
      - 'helm/librechat/values.yaml'
      - 'helm/librechat/**'
      - 'helm/librechat-rag-api/**'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: 781189302813.dkr.ecr.us-east-1.amazonaws.com

permissions:
  contents: read
  id-token: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set version
        run: |
          echo "Searching for version in values.yaml..."
          cat helm/librechat/values.yaml
          echo "Extracting version..."
          VERSION=$(grep '^[[:space:]]*tag:' helm/librechat/values.yaml | grep -v '#' | head -n1 | awk -F'"' '{print $2}')
          echo "Extracted version: '$VERSION'"
          if [ -z "$VERSION" ]; then
            echo "No version found, using default"
            VERSION="1.7.3"
          else
            # Remove 'v' prefix if present
            VERSION=${VERSION#v}
            echo "Version after removing potential 'v' prefix: $VERSION"
          fi
          # Validate version format
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Invalid version format: $VERSION"
            echo "Using default version"
            VERSION="1.7.3"
          fi
          echo "Final version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::781189302813:role/github-actions-research
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push LibreChat image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: >-
            ${{ env.ECR_REGISTRY }}/librechat:${{ env.VERSION }}

      # Use official MongoDB image instead of building custom one
      - name: Pull and push MongoDB image
        run: |
          docker pull mongo:8.0.3
          docker tag mongo:8.0.3 ${{ env.ECR_REGISTRY }}/mongodb:8.0.3
          docker push ${{ env.ECR_REGISTRY }}/mongodb:8.0.3

      # Use official Meilisearch image instead of building custom one
      - name: Pull and push Meilisearch image
        run: |
          docker pull getmeili/meilisearch:v1.7.3
          docker tag getmeili/meilisearch:v1.7.3 ${{ env.ECR_REGISTRY }}/meilisearch:v1.7.3
          docker push ${{ env.ECR_REGISTRY }}/meilisearch:v1.7.3

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.12.3'

      - name: Package Helm Charts
        run: |
          # Package LibreChat chart
          helm dependency update helm/librechat
          helm package helm/librechat

          # Package LibreChat RAG API chart
          helm dependency update helm/librechat-rag-api
          helm package helm/librechat-rag-api

      - name: Push Helm Charts to ECR
        run: |
          # Create ECR repository for Helm if it doesn't exist
          aws ecr describe-repositories --repository-names helm-charts || \
            aws ecr create-repository --repository-name helm-charts

          # Push LibreChat chart
          LIBRECHAT_CHART=$(ls librechat-*.tgz)
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
            helm registry login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}
          helm push $LIBRECHAT_CHART oci://${{ env.ECR_REGISTRY }}/helm-charts/

          # Push LibreChat RAG API chart
          RAG_CHART=$(ls librechat-rag-api-*.tgz)
          helm push $RAG_CHART oci://${{ env.ECR_REGISTRY }}/helm-charts/
